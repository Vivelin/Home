using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace Vivelin.Home
{
    /// <summary>
    /// Provides pseudo-random numbers, number generators and extension methods.
    /// </summary>
    /// <remarks>
    /// Pseudo-random number generators provided by this class are thread-safe.
    /// </remarks>
    public static class RNG
    {
        private static readonly object globalLock = new object();
        private static readonly Random globalRandom = new Random();

        private static readonly ThreadLocal<Random> threadRandom =
            new ThreadLocal<Random>(CreateRandom);

        /// <summary>
        /// Gets a pseudo-random number generator for the current thread.
        /// </summary>
        public static Random Random => threadRandom.Value;

        /// <summary>
        /// Creates a new instance of the <see cref="T:Random"/> class.
        /// </summary>
        /// <returns>
        /// A new <see cref="T:System.Random"/> instance, initialized with a
        /// seed generated by a global instance.
        /// </returns>
        public static Random CreateRandom()
        {
            int seed;
            lock (globalLock)
                seed = globalRandom.Next();
            return new Random(seed);
        }

        /// <summary>
        /// Returns a random non-negative integer.
        /// </summary>
        /// <returns>
        /// A random integer greater than or equal to 0 and less than
        /// <see cref="int.MaxValue"/>.
        /// </returns>
        public static int Next() => Random.Next();

        /// <summary>
        /// Returns a random integer in the range [0, <paramref name="max"/>).
        /// </summary>
        /// <param name="max">The exclusive upper bound.</param>
        /// <returns>
        /// A random integer greater than or equal to 0 and less than
        /// <paramref name="max"/>.
        /// </returns>
        public static int Next(int max) => Random.Next(max);

        /// <summary>
        /// Returns a random integer in the range [<paramref name="min"/>,
        /// <paramref name="max"/>).
        /// </summary>
        /// <param name="min">The inclusive lower bound.</param>
        /// <param name="max">The exclusive upper bound.</param>
        /// <returns>
        /// A random integer greater than or equal to <paramref name="min"/> and
        /// less than <paramref name="max"/>.
        /// </returns>
        public static int Next(int min, int max) => Random.Next(min, max);

        /// <summary>
        /// Returns a random element from the list.
        /// </summary>
        /// <typeparam name="T">The type of elements in the list.</typeparam>
        /// <param name="list">The list to sample.</param>
        /// <returns>A random element from the list.</returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="list"/> is null.
        /// </exception>
        public static T Sample<T>(this IList<T> list)
        {
            if (list == null) throw new ArgumentNullException(nameof(list));

            var i = Next(list.Count);
            return list[i];
        }

        /// <summary>
        /// Returns a random element from the read-only list.
        /// </summary>
        /// <typeparam name="T">The type of elements in the list.</typeparam>
        /// <param name="list">The read-only list to sample.</param>
        /// <returns>A random element from the list.</returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="list"/> is null.
        /// </exception>
        public static T Sample<T>(this IReadOnlyList<T> list)
        {
            if (list == null) throw new ArgumentNullException(nameof(list));

            var i = Next(list.Count);
            return list[i];
        }

        /// <summary>
        /// Selects a random element from a sequence.
        /// </summary>
        /// <typeparam name="T">The type of elements in the data source.</typeparam>
        /// <param name="query">A sequence of values to sample.</param>
        /// <returns>A random element from the sequence, or a default value.</returns>
        public static T Sample<T>(this IQueryable<T> query)
        {
            return query.OrderBy(x => Guid.NewGuid())
                        .FirstOrDefault();
        }
    }
}